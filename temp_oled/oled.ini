// Measure temp and humidity, display the result for a minute and dim/disconnect the screen. 
// Blink the blue led of the humidity is above 60 or yellow led if below 40.
// blink once for each 10 percent increment.

// includes
#include <avr/sleep.h> //Needed for sleep_mode
#include <avr/wdt.h> //Needed to enable/disable watch dog timer
#include <TinyWireM.h>
#include "DHT20.h"
#include <Tiny4kOLED.h>

// globals vars and objects
DHT20 DHT;
byte blueLed = PB4;
byte yellowLed = PB3; 
byte greenLed = PB1;
int watchdog_counter = 0; // number of interrupt
struct DHTresult {float temp; float hum; int hum10;};
float vcc = 0.0; // voltage of attiny85 

void setup() {
  initOled();
  pinMode(blueLed, OUTPUT);
  pinMode(yellowLed, OUTPUT);
  pinMode(greenLed, OUTPUT);
  blink(yellowLed,3);
  blink(blueLed,3);
  blink(greenLed,3);
  //Power down various bits of hardware to lower power usage  
  set_sleep_mode(SLEEP_MODE_PWR_DOWN); //Power down everything, wake up from WDT
  sleep_enable();
  DHT.begin(); 
  readTempHum(); // wait for the DHT20 to start
}

void initOled() {
  oled.begin();
  oled.setFont(FONT6X8);// 8X16); // Two fonts are supplied with this library, FONT8X16 and FONT6X8
  oled.clear(); // Clear the memory before turning on the display
  oled.on(); // Turn off the display
  oled.clear();
  oled.switchRenderFrame(); // Switch the half of RAM that we are writing to, to be the half that is non currently displayed  
}

//This runs each time the watch dog wakes us up from sleep
ISR(WDT_vect) {
  watchdog_counter++;
}

void loop() {
  // first 8x8seconds, display on, update temp/hum/vcc every 8 seconds.
  // Thereafter, every 32 seconds, read temp/hum/vcc and blink led
  if ((watchdog_counter < 8)|| (vcc>3.8)) { // only lit led for a minute at the start (or full cap). When unit is tilt, it restart and displays again.
    DHTresult TempHum = readTempHum();
    vcc = (float) readVcc()/1000;
    updateDisplay(TempHum.temp, TempHum.hum, vcc);
    alert(TempHum.hum10);
    oled.on();
  }
  else {
    oled.off();
    if (0 == (watchdog_counter % 4)) {
      vcc = (float) readVcc()/1000;
      DHTresult TempHum = readTempHum();
      alert(TempHum.hum10);
    }
  }
  setup_watchdog(9); //Setup watchdog to go off after 8sec
  sleep_mode(); //Go to sleep! Wake up 8 sec later
}

void updateDisplay(float temp, float hum, float vcc) {
  oled.clear();  // Clear the half of memory not currently being displayed.
  oled.setCursor(0, 0); //(X IN PIXELS, Y IN ROWS OF 8 PIXELS STARTING WITH 0);
  oled.print(F("Temp: ")); // write to RAM, not displayed yet
  oled.print(temp);
  oled.write(' C');
  oled.setCursor(0, 2);
  oled.print(F("Hum:  "));
  oled.print(hum);
  oled.print(F( "%"));
  oled.setCursor(0,3);
  oled.print(F("Volt: "));
  oled.print(vcc);
  oled.print(F(" V"));
  oled.switchFrame(); //display the data
}

void setup_watchdog(int timerPrescaler) {
  if (timerPrescaler > 9 ) timerPrescaler = 9; //Limit incoming amount to legal settings
  byte bb = timerPrescaler & 7; 
  if (timerPrescaler > 7) bb |= (1<<5); //Set the special 5th bit if necessary
  //This order of commands is important and cannot be combined
  MCUSR &= ~(1<<WDRF); //Clear the watch dog reset
  WDTCR |= (1<<WDCE) | (1<<WDE); //Set WD_change enable, set WD enable
  WDTCR = bb; //Set new watchdog timeout value
  WDTCR |= _BV(WDIE); //Set the interrupt enable, this will keep unit from resetting after each int
}

DHTresult readTempHum(){
  DHTresult TempHum;
  int status = DHT.read();
  while (status != DHT20_OK) {
    delay(50);
    status = DHT.read(); 
  }
  int i;
  i = 100*DHT.getTemperature();
  TempHum.temp = (float) i/100;
  i = 100*DHT.getHumidity();
  TempHum.hum = (float) i/100;
  TempHum.hum10 = (int) TempHum.hum / 10;  
  return TempHum;
}

void blink(byte led, byte cnt) {
  for (byte i = 0; i<cnt; i++) {
    digitalWrite(led,HIGH);
    delay(60);
    digitalWrite(led,LOW);
    delay(40);
  }
}

void alert(int hum10) {
  if (hum10 <=3) {blink(yellowLed,4-hum10);}
  else if (hum10>=6) {blink(blueLed,abs(5-hum10));}
  else {blink(greenLed,1);}
}

long readVcc() {
  // Read 1.1V reference against AVcc
  // set the reference to Vcc and the measurement to the internal 1.1V reference
  #if defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
    ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  #elif defined (__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
    ADMUX = _BV(MUX5) | _BV(MUX0);
  #elif defined (__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
    ADMUX = _BV(MUX3) | _BV(MUX2);
  #else
    ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  #endif  
  delay(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
  while (bit_is_set(ADCSRA,ADSC)); // measuring
  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH  
  uint8_t high = ADCH; // unlocks both
  long result = (high<<8) | low;
  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
  return result; // Vcc in millivolts
}
